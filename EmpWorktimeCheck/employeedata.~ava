import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseEvent;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.border.TitledBorder;
import java.util.Enumeration;



/**
 *
 * Description
 *
 * @version 1.0 from 13/02/2023
 * @author 
 */
public class employeedata extends JFrame {
  // start attributes
  private JLabel lYourID1 = new JLabel();
  private JLabel lTime1 = new JLabel();
  private JTextField jTextField1 = new JTextField();
  private JTextField jTextField2 = new JTextField();
  private JButton bCheckIn2 = new JButton();
  private JButton bEdit1 = new JButton();
  private JButton bDelete1 = new JButton();
  private JButton bClear1 = new JButton();
  private JTable jTable1 = new JTable(0, 4);
  private DefaultTableModel Model = (DefaultTableModel) jTable1.getModel(); 
  private JScrollPane jScrollPane1 = new JScrollPane(jTable1);
  private JButton bRefreshTable1 = new JButton(); 
  
  private JTextField jTextField3 = new JTextField();
  private JLabel lChangeto1 = new JLabel();
  private JButton bCheckOut1 = new JButton();
  // end attributes
  
 
  

  public employeedata() { 
    
    
    
    // Frame-Init
    super();
    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    int frameWidth = 558; 
    int frameHeight = 677;
    setSize(frameWidth, frameHeight);
    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
    int x = (d.width - getSize().width) / 2;
    int y = (d.height - getSize().height) / 2;
    setLocation(x, y);
    setTitle("Employee Data");
    setResizable(false);
    Container cp = getContentPane();
    cp.setLayout(null);
    // start components
    EmpData();
    lYourID1.setBounds(96, 96, 113, 33);
    lYourID1.setText("Your ID");
    cp.add(lYourID1);
    lTime1.setBounds(96, 144, 113, 33);
    lTime1.setText("Time");
    cp.add(lTime1);
    jTextField1.setBounds(232, 96, 144, 40);
    cp.add(jTextField1);
    jTextField2.setBounds(232, 144, 144, 40);
    cp.add(jTextField2);
     jTextField2.setEnabled(false);
    bCheckIn2.setBounds(144, 232, 80, 24);
    bCheckIn2.setText("Check In");
    bCheckIn2.setMargin(new Insets(2, 2, 2, 2));
    
    
    
    
    //------------------------------------------------------------DATE TIME FUCNTION ------------------------------------------------------
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss | dd-MM-yyyy ");
    LocalDateTime now = LocalDateTime.now();
    String formattedDateTime = now.format(formatter);
    
    jTextField2.setText(formattedDateTime);
    
    //---------------------------------------------------------------------------------------------------------------------------------------
    
    
    
    bCheckIn2.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bCheckIn2_ActionPerformed(evt);
      }
    });
    cp.add(bCheckIn2);
    bEdit1.setBounds(112, 320, 80, 24);
    bEdit1.setText("Edit");
    bEdit1.setMargin(new Insets(2, 2, 2, 2));
    bEdit1.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bEdit1_ActionPerformed(evt);
      }
    });
    cp.add(bEdit1);
    bDelete1.setBounds(240, 320, 80, 24);
    bDelete1.setText("Delete");
    bDelete1.setMargin(new Insets(2, 2, 2, 2));
    bDelete1.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bDelete1_ActionPerformed(evt);
      }
    });
    cp.add(bDelete1);
    bClear1.setBounds(384, 320, 80, 24);
    bClear1.setText("Clear");
    bClear1.setMargin(new Insets(2, 2, 2, 2));
    
    bClear1.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bClear1_ActionPerformed(evt);
      }
    });
    jTable1.getColumnModel().getColumn(0).setHeaderValue("YOURID");
    jTable1.getColumnModel().getColumn(1).setHeaderValue("CHECKEMP");
    jTable1.getColumnModel().getColumn(2).setHeaderValue("TIME");
    
    
    jTable1.addMouseListener(new MouseAdapter() { 
      public void mouseClicked(MouseEvent evt) { 
        jTable1_MouseClicked(evt);
      }
    });
    
    
    cp.add(bClear1);
    jScrollPane1.setBounds(40, 392, 480, 216);
    cp.add(jScrollPane1);
    bRefreshTable1.setBounds(40, 360, 480, 24);
    bRefreshTable1.setText("RefreshTable");
    bRefreshTable1.setMargin(new Insets(2, 2, 2, 2)); cp.add(bRefreshTable1);
    bRefreshTable1.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bRefreshTable1_ActionPerformed(evt);
      }
    });
    
    jTextField3.setBounds(384, 96, 112, 40);
    cp.add(jTextField3);

    
    lChangeto1.setBounds(408, 64, 80, 24);
    lChangeto1.setText("Change to ");
    cp.add(lChangeto1);
    bCheckOut1.setBounds(320, 232, 80, 24);
    bCheckOut1.setText("Check Out");
    bCheckOut1.setMargin(new Insets(2, 2, 2, 2));
    bCheckOut1.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bCheckOut1_ActionPerformed(evt);
      }
    });
    cp.add(bCheckOut1);
    // end components
    setVisible(true);
  };
  public void EmpData(){
    try {
      // Step 1: Connect to the database
      Connection conn = DriverManager.getConnection(
      // start methods
      "jdbc:mysql://localhost/emptime", "root", "");
      
      //  Execute a query
      Statement st = conn.createStatement();
      ResultSet rs = st.executeQuery("SELECT * FROM emptimecheck");
      
      //  Create a DefaultTableModel object
      DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
      //       DefaultTableModel model =  new DefaultTableModel(
      //          new Object[] { "lYourID1" , "title" , "author" , "publisher" , "publishedYear"  }, 0);  // set a name in table to display 
      
      
      while (rs.next()) {
        String YourID= rs.getString("YOURID");  //<<< the columns name in database
        String CHECKEMP = rs.getString("CHECKEMP");    //<<< the columns name in database
        String TIME = rs.getString("TIME");   //<<< the columns name in database
        model.addRow(new Object[] { YourID,  CHECKEMP, TIME});  // add row to the table until it can't find any data in database 
  
      }
      
      
      // Close the connection
      conn.close();
    } catch (SQLException e) {
      e.printStackTrace();
    };  
  };
   
  public static void main(String[] args) {
    new employeecheck();
  } // end of main
  
  public void bCheckIn2_ActionPerformed(ActionEvent evt) {
    
    
    String YOURID = jTextField1.getText();
    //    String AUTHOR  = jTextField3.getText();
    String CHECKEMP  =  "Check In âœ”";
    String TIME = jTextField2.getText();
    
    
    
    try{
      //      con = DriverManager.getConnection(dbUrl,"root","");
      Connection conn = DriverManager.getConnection(
      "jdbc:mysql://localhost/emptime", "root", "");
      //      Statement stmt = connection.createStatement();
      //       String sqlStatement =;
      PreparedStatement ps = null;
      ps = conn.prepareStatement("insert into emptimecheck values (?,?,?)");
      ps.setString(1, YOURID);
      ps.setString(2, CHECKEMP);
      ps.setString(3, TIME);
      
      ps.executeUpdate();
      ps.close();
      conn.close();
      
      jTextField1.setText("");
      
      
      
      JOptionPane.showMessageDialog(null, "Saved!");
      
      bEdit1.setEnabled(false);
      bDelete1.setEnabled(false);
      
    }catch(Exception e) {
      System.out.println("Connection fails");
      JOptionPane.showMessageDialog(null, "Error! \nID incorrect");
    } 
    
  } // end of bCheckIn2_ActionPerformed

  public void bEdit1_ActionPerformed(ActionEvent evt) {
    // TODO add your code here
    DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
    int selectedIndex = jTable1.getSelectedRow();
    
    try {
      int ID = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
      Connection conn = DriverManager.getConnection(
      "jdbc:mysql://localhost/emptime", "root", "");
      conn.createStatement();
      PreparedStatement ps  = null;
      Statement st = conn.createStatement();
      
      
      String YOURID = jTextField1.getText();
      String YOURIDCHANGE = jTextField3.getText();
      
      ps = conn.prepareStatement("update emptimecheck set YOURID =? where YOURID= ? ");
      ps.setString(1, YOURIDCHANGE);
      ps.setString(2, YOURID);
      
      
      
      ps.executeUpdate();
      ps.close();
      conn.close();
      
      jTextField1.setText("");
      jTextField3.setText("");
      JOptionPane.showMessageDialog(null, "Updated!");
      
      bCheckIn2.setEnabled(true);
      bEdit1.setEnabled(false);
      bDelete1.setEnabled(false);
      
      
    } catch(SQLException e) {
      System.out.println("SQL error occurred: " + e.getMessage());
      JOptionPane.showMessageDialog(null, "Error");
    }
    model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    EmpData();
  } // end of bEdit1_ActionPerformed

  public void bDelete1_ActionPerformed(ActionEvent evt) {
    DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
    int selectedIndex = jTable1.getSelectedRow();
    
    try {
      int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
      
      int dialogResult = JOptionPane.showConfirmDialog (null, "Do you want to Delete the record","Warning",JOptionPane.YES_NO_OPTION);
      if(dialogResult == JOptionPane.YES_OPTION){
        Connection conn = DriverManager.getConnection(
        "jdbc:mysql://localhost/emptime", "root", "");
        conn.createStatement();
        PreparedStatement ps  = null;
        
        String YOURID = jTextField1.getText();
        
        ps = conn.prepareStatement("delete from emptimecheck where YOURID=? ");
        ps.setString(1, YOURID);
        
        
        
        ps.executeUpdate();
        
        ps.close();
        conn.close();
        
        jTextField1.setText("");
        
        JOptionPane.showMessageDialog(null, "Deleted!");
        
        
        
        bCheckIn2.setEnabled(true);
        bEdit1.setEnabled(false);
        bDelete1.setEnabled(false);
        
      }
      
      
    } catch(Exception e) {
      System.out.println("Connection fails");
      JOptionPane.showMessageDialog(null, "Error");
    }
    // TODO add your code here
    model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    EmpData();
  } // end of bDelete1_ActionPerformed

  public void bClear1_ActionPerformed(ActionEvent evt) {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    EmpData();
    jTextField1.setText("");
    bCheckIn2.setEnabled(true);
    bEdit1.setEnabled(true);
    bDelete1.setEnabled(true); 
    // TODO add your code here
    
  } // end of bClear1_ActionPerformed

  public void bRefreshTable1_ActionPerformed(ActionEvent evt) {
    // TODO add your code here
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
   EmpData();
    bCheckIn2.setEnabled(true);
    bEdit1.setEnabled(true);
    bDelete1.setEnabled(true); 
  }; // end of bRefreshTable1_ActionPerformed
  
  public void jTable1_MouseClicked(MouseEvent evt) {
    DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
    int selectedIndex = jTable1.getSelectedRow();
    
    int selectedRow = jTable1.getSelectedRow();
    
    jTextField1.setText(model.getValueAt(selectedIndex, 0).toString());
    jTextField2.setText(model.getValueAt(selectedIndex, 3).toString());
    
    bCheckIn2.setEnabled(false);
    bEdit1.setEnabled(true);
    bDelete1.setEnabled(true);
  }

  

  public void bCheckOut1_ActionPerformed(ActionEvent evt) {
    // TODO add your code here
        
    String YOURID = jTextField1.getText();
    //    String AUTHOR  = jTextField3.getText();
    String CHECKEMP  =  "Check Out âœ–";
    String TIME = jTextField2.getText();
    
    
    
    try{
      //      con = DriverManager.getConnection(dbUrl,"root","");
      Connection conn = DriverManager.getConnection(
      "jdbc:mysql://localhost/emptime", "root", "");
      //      Statement stmt = connection.createStatement();
      //       String sqlStatement =;
      PreparedStatement ps = null;
      ps = conn.prepareStatement("insert into emptimecheck values (?,?,?)");
      ps.setString(1, YOURID);
      ps.setString(2, CHECKEMP);
      ps.setString(3, TIME);
      
      ps.executeUpdate();
      ps.close();
      conn.close();
      
      jTextField1.setText("");
      
      
      
      JOptionPane.showMessageDialog(null, "Saved!");
      
      bEdit1.setEnabled(false);
      bDelete1.setEnabled(false);
      
    }catch(SQLException e) {
      System.out.println("SQL error occurred: " + e.getMessage());
      JOptionPane.showMessageDialog(null, "Error! \nID incorrect");
    } 
    
  } // end of bCheckOut1_ActionPerformed

  // end methods
}